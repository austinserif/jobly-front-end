{"version":3,"sources":["CurrentUserContext.js","pages/Home.js","config.js","api/JoblyApi.js","hooks/useSubmitApplication.js","components/JobCard.js","hooks/useSearch.js","components/SearchBar.js","hooks/useLoading.js","components/LoadingIcon.js","pages/Jobs.js","pages/Company.js","hooks/useInputChange.js","components/Field.js","pages/Login.js","components/CompanyCard.js","pages/Companies.js","pages/Profile.js","hooks/useLoadRegistration.js","pages/Registration.js","components/Routes.js","components/Nav.js","hooks/useCurrentUser.js","components/Banner.js","App.js","serviceWorker.js","index.js","jobly-logo.svg"],"names":["CurrentUserContext","createContext","Home","className","require","config","SECRET","process","SECRET_KEY","JoblyApi","endpoint","paramsOrData","verb","_token","localStorage","getItem","console","debug","axios","method","url","res","data","error","response","message","Array","isArray","handle","request","company","search","jobs","companies","username","password","token","completedFields","fieldsObj","field","user","jwt","verify","fields","log","jobId","useSubmitApplication","initial","useState","state","setState","status","setStatus","a","applyForJob","setTimeout","JobCard","id","title","salary","equity","application","submitApplication","disabled","type","onClick","useSearch","value","setValue","handleChange","e","target","resetInput","SearchBar","callback","onSubmit","preventDefault","onChange","useLoading","args","loading","isLoading","setIsLoading","responseData","setResponseData","history","useHistory","useEffect","length","push","getResponseData","LoadingIcon","alt","src","Logo","width","Jobs","setSearch","getJobs","map","d","key","uuid","company_handle","Company","useParams","getCompany","name","description","useInputChange","values","setValues","vals","Field","required","placeholder","Login","userToken","handleLogin","useContext","resetValues","errs","setErrors","handleSubmit","CompanyCard","num_employees","to","Companies","getCompanies","c","logo_url","Profile","userData","handleEditProfile","setBanner","first_name","last_name","email","photo_url","style","padding","useLoadRegistration","errors","Object","entries","f","register","Registration","currentUser","updateCurrentUser","resData","handleRegistration","Routes","exact","path","component","withRouter","Nav","handleLogout","JoblyLogo","useCurrentUser","setUserToken","setUserData","getCurrentUserData","initialLoad","login","setItem","updateUserData","Banner","cursor","App","banner","toggleIsLoading","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.f2d2f620.chunk.js","sourcesContent":["import {createContext} from 'react';\n\nconst CurrentUserContext = createContext();\n\nexport default CurrentUserContext;","//libraries\nimport React from 'react';\n\n//styles\nimport '../styles/Home.css';\n\nconst Home = () => {\n    return (\n        <div className=\"Home\">\n            <section className=\"section\">\n                <h1>\n                    Welcome to Jobly!\n                </h1>\n                <h3>\n                    A cross-roads of unconventional paths\n                </h3>\n            </section>\n            <section className=\"section\">\n\n            </section>\n        </div>\n\n    );\n}\n\nexport default Home;","require(\"dotenv\").config();\n\nconst SECRET = process.env.SECRET_KEY || 'test';\n\nexport default SECRET;","import axios from 'axios';\nimport jwt from 'jsonwebtoken';\nimport SECRET from '../config';\n\nclass JoblyApi {\n    static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n\n        //get jwt from localStorage if available\n        paramsOrData._token = (\n            localStorage.getItem('userToken')\n        );\n\n        console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n        try {\n            const res = await axios({\n                method: verb,\n                url: `https://jobly-sans-serif.herokuapp.com/${endpoint}`,\n                [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n            });\n\n            return res.data;\n\n                // axios sends query string data via the \"params\" key,\n                // and request body data via the \"data\" key,\n                // so the key we need depends on the HTTP verb'\n\n        } catch(err) {\n            console.error(\"API Error:\", err.response);\n            let message = err.response.data.message;\n            throw Array.isArray(message) ? message : [message];\n        }\n    }\n\n    /** Get all data about a specific company, including all available jobs. \n     * method has one required parameter, handle (string), and one optional parameter jobsOnly (boolean). \n     * By default jobsOnly is set to true, and so returns an array on job objects corresponding to the handle\n     * argument. If a false value is instead passed into the jobsOnly parameter, then getCompany will return the\n     * whole company object, which includes \n    */\n    static async getCompany(handle) {\n        let res = await JoblyApi.request(`companies/${handle}`);\n        return res.company;\n    }\n    \n    /** Get all job listings in the database */\n    static async getJobs(search=null) {\n        let res = await JoblyApi.request(`jobs`, {search});\n        return res.jobs;\n    }\n\n    static async getCompanies(search=null) {\n        let res = await JoblyApi.request(`companies`, {search});\n        return res.companies;\n    }\n\n    static async login(username, password) {\n        let res = await JoblyApi.request(`login`, {username, password}, 'post');\n        return res.token;\n    }\n    \n    /** takes an variable length array of length-two arrays, each two-length array representing a completed registration field,\n     * and containing [key, value], respectively.  */\n    static async register(completedFields) {\n        const fieldsObj = {};\n        for (let field of completedFields) {\n            fieldsObj[field[0]] = field[1];\n        }\n        let res = await JoblyApi.request(`users`, {...fieldsObj}, 'post');\n        return res.token;\n    }\n\n    /** returns data related to currentUser*/\n    static async getCurrentUserData() {\n        //get currentUser from localStorage\n        const token = localStorage.getItem('userToken');\n\n        //verify token\n        let user = jwt.verify(token, SECRET);\n\n        //extract username from user\n        const { username } = user;\n\n        //get data about that user\n        let res = await JoblyApi.request(`users/${username}`);\n        return res.user;\n    }\n\n    /** Takes a user object and username string and updates the user info associated\n     * with the passed username to match the new user Object\n     * \n     * params: fields (Object), username (string)*/\n    static async updateUserInfo(fields, username) {\n        console.log(username)\n        let res = await JoblyApi.request(`users/${username}`, fields, 'patch');\n        return res.user;\n    }\n\n    /** Takes a user object and username string and updates the user info associated\n     * with the passed username to match the new user Object\n     * \n     * params: fields (Object), username (string)*/\n    static async updateUserData(fields, username) {\n        //block jobs and username field from being submitted\n        delete fields.jobs;\n        delete fields.username;\n\n        //send updated user data to server in patch request\n        let res = await JoblyApi.request(`users/${username}`, fields, 'patch');\n\n        //return updated user object\n        return res.user;\n    }\n\n    static async applyForJob(jobId) {\n        let res = await JoblyApi.request(`jobs/${jobId}/apply`, {}, 'post');\n        return res;\n    }\n}\n\nexport default JoblyApi;","import { useState } from 'react';\nimport JoblyApi from '../api/JoblyApi';\n\nconst useSubmitApplication = (initial, jobId) => {\n\n    const [state, setState] = useState(initial);\n    const [status, setStatus] = useState('Apply');\n\n    const submitApplication = async () => {\n        setStatus('Submitting...');\n        const response = await JoblyApi.applyForJob(jobId);\n        console.log(response);\n        setTimeout(() => {\n            setState(true);\n        }, 3000);\n    }\n\n    return [state, status, submitApplication];\n}\n\nexport default useSubmitApplication;","//libraries\nimport React from 'react';\n\n//styles\nimport '../styles/JobCard.css'\nimport useSubmitApplication from '../hooks/useSubmitApplication';\n\nconst JobCard = ({id, title, salary, equity, state}) => {\n\n    const [ application, status, submitApplication ] = useSubmitApplication(state, id);\n\n    return (\n        <div className=\"JobCard card\" id={id}>\n            <div className=\"card-section bottom-border\">\n                <h2 className=\"JobCard-title card-item-left\">{title}</h2>\n            </div>\n            <div className=\"card-section\">\n                <h4 className=\"JobCard-salary card-item-left\">Salary: ${salary}</h4>\n            </div>\n            <div className=\"card-section\">\n                <h4 className=\"JobCard-equity card-item-left\">Equity: {100 * equity}%</h4>\n            </div>\n            <div className=\"card-section\">\n                {\n                    application ? (<button className='JobCard-application-button card-item-left applied' disabled type=\"button\">Applied</button>) : ((<button className='JobCard-application-button card-item-left' onClick={submitApplication} type=\"button\">{status}</button>))\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default JobCard;","//libraries\nimport { useState } from 'react';\n\nconst useSearch = (initial=\"\") => {\n    const [ value, setValue ] = useState(initial);\n\n    const handleChange = (e) => {\n        return setValue(e.target.value);\n    }\n    const resetInput = () => setValue('');\n\n    return [ value, handleChange, resetInput ];\n}\n\nexport default useSearch;","import React from 'react';\nimport useSearch from '../hooks/useSearch';\nimport '../styles/SearchBar.css';\n\nconst SearchBar = ({callback}) => {\n\n    const [value, handleChange] = useSearch();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(value);\n        callback(value);\n    }\n\n    return (\n        <form className=\"SearchBar\" onSubmit={handleSubmit}>\n            <input className=\"SearchBar-field\" value={value} type=\"text\" onChange={handleChange}/>\n            <button className=\"SearchBar-button\" type=\"submit\">Search</button>            \n        </form>\n    )\n}\n\nexport default SearchBar;","import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\n/** useLoading is a hook that takes a callback function and an optional args array as parameters,\n * and returns an array with two elements: [ responseData, isLoading ].\n * \n * responseData and isLoading have initial values of {} and true, respectively. Once the callback function\n * passed into useLoading has resolved its promise, responseData will be set to the returned value, and finally\n * isLoading will be set to false.\n */\nconst useLoading = (callback, args=[], search=null, loading=true, fields={}) => {\n    const [ isLoading, setIsLoading ] = useState(loading);\n    const [ responseData, setResponseData ] = useState(fields);\n    const history = useHistory();\n\n    useEffect(()=> {\n\n        /** params: callback (callback fn), args (array)\n         * \n         * Pass args into callback if present. Usually `callback` is a\n         * wrapper for API calls (thus async), and will return a Promise. Once \n         * the promise is resolved, `responseData` is updated in state, and isLoading\n         * is set to false.\n        */\n        const getResponseData = async (callback, args=[]) => {\n            \n            //reset isLoading to true if was false\n            setIsLoading(true);\n\n            try {\n                if (!args.length) {\n                    const response = await callback();\n                    setResponseData(response); \n                } else {\n                    const response = await callback(...args);\n                    setResponseData(response);\n                }\n\n                //update isLoading value in state to trigger re-render\n                setIsLoading(false);\n\n            } catch (err) {\n                history.push('/login')\n            }\n        }\n        getResponseData(callback, args); \n        \n        // eslint-disable-next-line\n    }, [search]);\n    return [ responseData, isLoading ];\n}\n\nexport default useLoading;","import React from 'react';\n\nimport Logo from '../jobly-logo.svg';\n\nimport '../styles/LoadingIcon.css';\n\nconst LoadingIcon = () => {\n    return (\n        <div className=\"LoadingIcon\">\n            <img className=\"App-logo\" alt=\"\" src={Logo} width=\"15%\"/>\n        </div>\n    );\n}\n\nexport default LoadingIcon;","//libraries\nimport React, { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\n\n//components\nimport JobCard from '../components/JobCard';\nimport SearchBar from '../components/SearchBar';\n\n//styles\nimport '../styles/Jobs.css';\nimport JoblyApi from '../api/JoblyApi';\nimport useLoading from '../hooks/useLoading';\nimport LoadingIcon from '../components/LoadingIcon';\n\n/** Jobs company renders a list of JobCard components, and a search bar. If component is\n * rendered from GET /jobs, then all job opennings from all companies will be listed. If \n * instead the component is rendered via GET /companies/:handle, then Jobs will use useParams\n * to get the company handle passed as a url param and list of all the job opennings associated\n * with that company.\n * \n * Jobs takes an optional boolean prop, `all`. If no props are passed to Jobs, then all is set to true by\n * default, and thus the component is signaled to render a list of ALL the jobs. In order to signal that\n * the component should render just the jobs for a single company, then all=false should be passed in. Otherwise\n * the Component won't know to get the URL param handle, and pass it into AJAX/API hook.\n * */\nconst Jobs = () => {\n\n    const [search, setSearch] = useState('');\n\n    //set callback and args. getJobs takes one optional parameter, handle\n    const [ callback, args ] = [JoblyApi.getJobs, [search]];\n\n    //call useLoading\n    const [ responseData, isLoading ] = useLoading(callback, args, search);\n\n    if (isLoading) {\n        return (\n            <div>\n                <LoadingIcon/>\n            </div>\n        );\n    }\n    \n    return (\n        <div className=\"Jobs\">\n            <div className=\"search-bar-container\">\n                <SearchBar callback={setSearch}/>\n            </div>\n            <div className=\"JobsList\">\n                {responseData.map(d => (<JobCard id={d.id} key={uuid()} title={d.title} company_handle={d.company_handle} salary={d.salary} equity={d.equity} state={d.state}/>))}\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Jobs;","//libraries\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { v4 as uuid } from 'uuid';\n\n//components\nimport JobCard from '../components/JobCard';\n\n//styles\nimport '../styles/Jobs.css';\nimport JoblyApi from '../api/JoblyApi';\nimport useLoading from '../hooks/useLoading';\nimport LoadingIcon from '../components/LoadingIcon';\n\n/** Company company renders a list of JobCard components, and a search bar. If component is\n * rendered from GET /jobs, then all job opennings from all companies will be listed. If \n * instead the component is rendered via GET /companies/:handle, then Jobs will use useParams\n * to get the company handle passed as a url param and list of all the job opennings associated\n * with that company.\n * \n * Jobs takes an optional boolean prop, `all`. If no props are passed to Jobs, then all is set to true by\n * default, and thus the component is signaled to render a list of ALL the jobs. In order to signal that\n * the component should render just the jobs for a single company, then all=false should be passed in. Otherwise\n * the Component won't know to get the URL param handle, and pass it into AJAX/API hook.\n * */\nconst Company = () => {\n    //get handle from URL parmams\n    const { handle } = useParams();\n\n    //set callback and args. getCompany takes one parameter: handle (string)\n    const [ callback, args ] = [JoblyApi.getCompany, [handle]];\n\n    //call useLoading\n    const [ responseData, isLoading ] = useLoading(callback, args);\n\n    const { name, description, jobs} = responseData;\n\n    if (isLoading) {\n        return (\n            <div>\n                <LoadingIcon/>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"Company\">\n\n            <div className=\"CompanyProfile\">\n                <div>\n                    <h2>{name}</h2>\n                </div>\n\n                <div>\n                    <p>\n                        {description}\n                    </p>\n                </div>\n\n            </div>\n\n            <div className=\"JobsList\">\n                {jobs.map(d => (<JobCard id={d.id} key={uuid()} title={d.title} company_handle={d.company_handle} salary={d.salary} equity={d.equity} state={d.state}/>))}\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Company;","import { useState } from 'react';\n\nconst useInputChange = (initial) => {\n\n    const [values, setValues]= useState(initial);\n\n    const handleChange = (e) => {\n        const { value, name } = e.target;\n        setValues({...values, [name]: value});\n    }\n    \n    const resetValues = () => {\n        setValues(initial);\n    }\n\n    const feedNewValues = (vals) => {\n        setValues(vals)\n    }\n    \n    return [ values, handleChange, resetValues, feedNewValues ];\n}\n\nexport default useInputChange;","import React from 'react';\n\nimport '../styles/Field.css';\n\n/** Generalized input field component. Renders an input element and its label.\n * \n * props: name (string), value (any), handleChange (callback fn), placeholder (string), type (string, default=\"text\")\n * \n*/\nconst Field = ({ disabled, required, name, value, handleChange, placeholder, type='text'}) => {\n    return (\n        <>\n            <input required={required ? true : false} className={`Field-field ${required ? 'required' : ''}`} alt=\"\" type={type} id={name} placeholder={placeholder} value={value} name={name} onChange={handleChange} disabled={disabled}/>       \n        </>\n    );\n}\n\nexport default Field;","import React, { useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useInputChange from '../hooks/useInputChange';\nimport {v4 as uuid} from 'uuid';\nimport '../styles/Form.css';\nimport '../styles/Field.css';\nimport CurrentUserContext from '../CurrentUserContext';\nimport Field from '../components/Field';\n\nconst Login = ({ userToken }) => {\n\n    const initial = {\n        username: '',\n        password: ''\n    }\n\n    const { handleLogin } = useContext(CurrentUserContext);\n\n    const history = useHistory();\n\n\n\n    const [ values, handleChange, resetValues ] = useInputChange(initial);\n\n    const [ errs, setErrors ] = useState(null);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const { username, password } = values;\n            await handleLogin(username, password);            \n        } catch (err) {\n            resetValues();\n            console.error(err);\n            setErrors(err);\n        }\n    }\n\n    const redirectToSignUp = () => {\n        history.push('/register')\n    }\n    \n    if ( userToken ) {\n        history.push('/');\n    }\n\n    return (\n        <form className=\"Form\" onSubmit={handleSubmit}>\n            <div className=\"Field\">\n                <h2>Job Portal Sign-In</h2>\n                <Field required key='username' name='username' value={values.username} handleChange={handleChange} placeholder='Username'/>\n                <Field required key='password' name='password' value={values.password} handleChange={handleChange} placeholder='Password' type='password'/>\n                <button id=\"sign-in-button\" className=\"Field-button\" type=\"submit\">Sign-In</button>\n                <div className=\"Form-errors\">\n                    { errs ? (errs.map(e => (<h4 key={() => uuid()} className=\"Form-err\">{e}</h4>))) : null}\n                </div>\n            </div>                \n                <div className=\"bottom-border Field-divider\" width='90%'></div>\n                \n            <div className=\"Field\">\n                <h4>New to Jobly?</h4>\n                <button id=\"login-sign-up-button\" className=\"Field-button\" type=\"button\" onClick={redirectToSignUp}>Sign-Up</button>\n            </div>\n        </form>\n    );\n}\n\nexport default Login;","//libraries\nimport React from 'react';\n\n//components\nimport { Link } from 'react-router-dom';\n\n//styles\nimport '../styles/CompanyCard.css'\n\nconst CompanyCard = ({handle, name, num_employees, description}) => {\n    console.log(num_employees)\n    return (\n        <Link className=\"CompanyCard card\" id={handle} to={`companies/${handle}`}>\n            <div className=\"card-section bottom-border\">\n                <h2 className=\"CompanyCard-name card-item-left\">{name}</h2>\n            </div>\n            <div className=\"card-section\">\n                <p className=\"CompanyCard-description card-item-left\">{description}</p>\n            </div>\n        </Link>\n    );\n}\n\nexport default CompanyCard;","//libraries\nimport React, { useState } from 'react';\nimport JoblyApi from '../api/JoblyApi';\nimport useLoading from '../hooks/useLoading';\nimport { v4 as uuid } from 'uuid';\nimport SearchBar from '../components/SearchBar';\nimport CompanyCard from '../components/CompanyCard';\n\n//styles\nimport '../styles/Companies.css';\nimport LoadingIcon from '../components/LoadingIcon';\n\n\nconst Companies = () => {\n\n    const [ search, setSearch ] = useState('');\n\n    const [ callback, args ] = [JoblyApi.getCompanies, [search]];\n    \n    const [ responseData, isLoading ] = useLoading(callback, args, search);\n\n    if (isLoading) {\n        return (\n            <div>\n                <LoadingIcon/>\n            </div>\n        );\n    }\n\n    console.log(responseData);\n\n    return (\n        <div className=\"Companies\">\n            <div>\n                <SearchBar callback={setSearch}/>\n            </div>\n            <div className=\"CompaniesList\">\n                {responseData.map(c => (<CompanyCard key={uuid()} handle={c.handle} name={c.name} num_employees={c.num_employees} description={c.description} logo_url={c.logo_url}/>))}\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Companies;","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useInputChange from '../hooks/useInputChange';\nimport '../styles/Form.css';\nimport '../styles/Field.css';\nimport CurrentUserContext from '../CurrentUserContext';\nimport Field from '../components/Field';\nimport LoadingIcon from '../components/LoadingIcon';\n\nconst Profile = ({ userData, isLoading }) => {\n\n    const history = useHistory();\n\n    // load the currentUser and callback for updating the user token from context token from context\n    const { handleEditProfile, setBanner } = useContext(CurrentUserContext);\n\n    // load response data into the current values\n    const [ values, handleChange ] = useInputChange({...userData, password: ''});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        handleEditProfile(values, userData.username)\n        setBanner('Your Profile Has Been Successfully Updated!');\n        history.push('/');\n    }\n\n    if (isLoading) {\n        return ( \n            <div>\n                <LoadingIcon/>\n            </div>)\n    }\n\n    return (\n        <form className=\"Form\" onSubmit={handleSubmit}>\n\n            <div className=\"Field\">\n\n                <h2>Profile Editor</h2>\n\n                <Field key='username' name='username' value={values.username || ''} handleChange={handleChange} placeholder='Username' disabled/>\n                <Field key='first_name' name='first_name' value={values.first_name || ''} handleChange={handleChange} placeholder='First Name'/>\n                <Field key='last_name' name='last_name' value={values.last_name || ''} handleChange={handleChange} placeholder='Last Name'/>\n                <Field key='email' name='email' value={values.email || ''} handleChange={handleChange} placeholder='Email'/>\n                <Field key='photo_url' name='photo_url' value={values.photo_url || ''} handleChange={handleChange} placeholder='Photo URL' type='uri'/>\n                \n            </div>\n                <div className=\"bottom-border Field-divider\" width='90%'>\n            </div>\n                <div style={{padding: '15px 0px 15px 0px', }}>\n                    <h3>Enter Password & Confirm Changes</h3>\n                    <Field required key='password' name='password' value={values.password} handleChange={handleChange} placeholder='Password' type='password'/>\n                    <button id=\"sign-up-button\" className=\"Field-button\" type=\"submit\">Confirm</button>\n                </div>\n\n\n\n        </form>\n    );\n}\n\nexport default Profile;","import { useState } from 'react';\nimport JoblyApi from '../api/JoblyApi';\n\nconst useLoadRegistration = () => {\n\n    const [ responseData, setResponseData ] = useState(null);\n\n    const [ errors, setErrors ] = useState(null);\n\n    const handleRegistration = async (fields) => {\n        try {\n            const completedFields = Object.entries(fields).map(f => {\n                if (f[0].length) {\n                    return f;\n                }\n            });\n\n            const res = await JoblyApi.register(completedFields);\n            setResponseData(res);\n\n        } catch(err) {\n\n            setErrors(err);\n\n        }\n    };\n    return [ responseData, errors, handleRegistration ];\n}\n\nexport default useLoadRegistration;","import React, { useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useInputChange from '../hooks/useInputChange';\nimport {v4 as uuid} from 'uuid';\nimport '../styles/Form.css';\nimport '../styles/Field.css';\nimport useLoadRegistration from '../hooks/useLoadRegistration';\nimport useFormCompletion from '../hooks/useFormCompletion';\nimport CurrentUserContext from '../CurrentUserContext';\nimport Field from '../components/Field';\n\nconst Registration = () => {\n\n    const initial = {\n        username: '',\n        password: '',\n        first_name: '',\n        last_name: '',\n        email: '',\n        photo_url: ''\n    }\n\n    //does this line make sense?\n    const { currentUser, updateCurrentUser } = useContext(CurrentUserContext);\n\n    const history = useHistory();\n\n    if ( currentUser ) {\n        history.push('/');\n    }\n\n    const [ values, handleChange, resetValues ] = useInputChange(initial);\n\n    const [ resData, errs, handleRegistration ] = useLoadRegistration();\n\n    // const allFieldsCompleted = useFormCompletion(values, required);\n\n    useEffect(() => {\n        if (resData) {\n            updateCurrentUser(resData);\n            history.push('/');\n        };\n    }, [resData, history]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        handleRegistration(values);\n        resetValues();\n    }\n\n    const redirectToLogin = () => {\n        history.push('/login')\n    }\n\n    return (\n        <form className=\"Form\" onSubmit={handleSubmit}>\n\n            <div className=\"Field\">\n\n                <h2>Job Portal Sign-In</h2>\n\n                <Field required key='username' name='username' value={values.username} handleChange={handleChange} placeholder='Username'/>\n                <Field required key='password' name='password' value={values.password} handleChange={handleChange} placeholder='Password' type='password'/>\n                <Field key='first_name' name='first_name' value={values.first_name} handleChange={handleChange} placeholder='First Name'/>\n                <Field key='last_name' name='last_name' value={values.last_name} handleChange={handleChange} placeholder='Last Name'/>\n                <Field key='email' name='email' value={values.email} handleChange={handleChange} placeholder='Email'/>\n                <Field key='photo_url' name='photo_url' value={values.photo_url} handleChange={handleChange} placeholder='Photo URL' type='uri'/>\n                \n                {/* <button id=\"sign-up-button\" className=\"Field-button\" type=\"submit\" disabled={!allFieldsCompleted}>Sign-Up</button> */}\n                <button id=\"sign-up-button\" className=\"Field-button\" type=\"submit\">Sign-Up</button>\n                <div className=\"Form-errors\">\n                    { errs ? (errs.map(e => (<h4 key={() => uuid()} className=\"Form-err\">{e}</h4>))) : null}\n                </div>\n\n            </div>\n                <div className=\"bottom-border Field-divider\" width='90%'>\n            </div>\n                \n            <div className=\"Field\">\n                <h4>Already Have An Account?</h4>\n                <button id=\"registration-sign-in-button\" className=\"Field-button\" type=\"button\" onClick={redirectToLogin}>Sign-In</button>\n            </div>\n        </form>\n    );\n}\n\nexport default Registration;","//libraries\nimport React from 'react';\n\n//components\nimport { Switch, Route, withRouter } from 'react-router-dom';\nimport Home from '../pages/Home';\nimport Jobs from '../pages/Jobs';\nimport Company from '../pages/Company';\nimport Login from '../pages/Login';\n\n//styles\nimport '../styles/Routes.css';\nimport Companies from '../pages/Companies';\nimport Profile from '../pages/Profile';\nimport Registration from '../pages/Registration';\n\n\n\nconst Routes = ({userToken, isLoading, userData}) => {\n    return (\n        <Switch className=\"Routes\">\n\n            <Route exact path=\"/\">\n                <Home/>\n            </Route>\n\n            <Route exact path=\"/companies\">\n                <Companies/>\n            </Route>\n\n            <Route exact path=\"/jobs\" component={withRouter(Jobs)}/>\n\n            <Route path=\"/companies/:handle\">\n                <Company/>\n            </Route>\n                        \n            <Route exact path=\"/login\">\n                <Login userToken={userToken}/>\n            </Route>\n\n            <Route exact path=\"/register\">\n                <Registration/>\n            </Route>\n            \n            <Route exact path=\"/profile\">\n                <Profile userData={userData} isLoading={isLoading}/>\n            </Route>\n\n            <Route>\n                <div>\n                    Whoops! The page you requested wasn't found!\n                </div>\n            </Route>\n        </Switch>\n    );\n}\n\nexport default Routes;","//libraries\nimport React from 'react';\n\n//components\nimport { Link } from 'react-router-dom';\nimport JoblyLogo from '../jobly-logo.svg';\n\n//styles \nimport '../styles/Nav.css';\n\nconst Nav = ({userToken, handleLogout}) => {\n\n    if (userToken) {\n        return (\n            <div className=\"Nav\">\n                <Link id=\"home-link\" className=\"Nav-link\" to=\"/\"><img alt=\"\" src={JoblyLogo} width='50px'/></Link>\n                <Link className=\"Nav-link\" onClick={handleLogout} to=\"/\"><h4>Logout</h4></Link>\n                <Link className=\"Nav-link\" to=\"/profile\"><h4>Profile</h4></Link>\n                <Link className=\"Nav-link\" to=\"/jobs\"><h4>Jobs</h4></Link>\n                <Link className=\"Nav-link\" to=\"/companies\"><h4>Companies</h4></Link>                \n            </div>\n        );\n    }\n\n    return (\n        <div className=\"Nav\">\n            <Link id=\"home-link\" className=\"Nav-link\" to=\"/\"><img alt=\"\" src={JoblyLogo} width='50px'/></Link>            \n            <Link className=\"Nav-link\" to=\"/login\"><h4>Login</h4></Link>\n        </div>\n    );\n}\n\nexport default Nav;","import { useState, useEffect } from 'react';\nimport JoblyApi from '../api/JoblyApi';\n\n/** \n * Manages all logic related to user data and token storage. It returns \n * [ userToken, userData, isLoading, toggleIsLoading, handleLogout, handleEditProfile, handleLogin ]. \n * */\nconst useCurrentUser = () => {\n\n    const [ userToken, setUserToken ] = useState(localStorage.userToken);\n    const [ userData, setUserData ] = useState({});\n    const [ isLoading, setIsLoading ] = useState(true);\n\n    useEffect(() => {\n        const initialLoad = async () => {\n            const response = await JoblyApi.getCurrentUserData();\n            setUserData(response);\n            setIsLoading(false);\n        }\n\n        if (userToken) {\n            initialLoad();\n        }      \n    }, []);\n\n    const toggleIsLoading = () => (setIsLoading(!isLoading));\n\n    /** handle logout sequence. clears userToken from localStorage and React state.\n     * Finally clears any userData in state.*/\n    const handleLogout = () => {\n        //remove userToken from localStorage\n        delete localStorage.userToken;\n\n        //clear userToken and userData from state\n        setUserToken(() => (''));\n        setUserData(() => ({}));\n    }\n\n    /** handle login sequence */\n    const handleLogin = async (username, password) => {\n        try {\n            //use credentials to get user token\n            const userToken = await JoblyApi.login(username, password);\n\n            //set the jwt for the new user into local Storage\n            localStorage.setItem('userToken', userToken);\n\n            /** pass new localStorage.userToken value to setUserToken. This is an important step for a couple reasons.\n            // 1. passing localStorage.userToken instead of userToken ensures that local storage remains the single source of truth\n            // 2. updating the value of userToken will trigger re-renders on dependent components */\n            setUserToken(() => (localStorage.userToken));\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    /** handle submission of profile edits */\n    const handleEditProfile = async (fields, username) => {\n        try {\n            // turn on loading screen\n            setIsLoading(true);\n\n            //send form to backend\n            const response = await JoblyApi.updateUserData(fields, username);\n            console.log(response);\n\n            //load response into state\n            setUserData(response);\n\n            //turn off loading screen\n            setIsLoading(false);\n        } catch (err) {\n            //read-out error\n            console.error(err);\n\n            //turn loading screen off incase error\n            setIsLoading(false);\n        }\n    }\n\n    return [ userToken, userData, isLoading, toggleIsLoading, handleLogout, handleEditProfile, handleLogin ]\n}\n\nexport default useCurrentUser;","import React, { useContext } from 'react';\nimport CurrentUserContext from '../CurrentUserContext';\nimport '../styles/Banner.css';\n\nconst Banner = ({message}) => {\n    const { setBanner } = useContext(CurrentUserContext);\n    return (\n        <div className=\"Banner\">\n            <div className=\"DeleteBannerButton\" style={{cursor: 'pointer'}} onClick={() => (setBanner(null))}>x</div>\n            <div className=\"BannerMessage\">{message}</div>\n        </div>\n    );\n}\n\nexport default Banner;","//libraries\nimport React, { useState } from 'react';\nimport CurrentUserContext from './CurrentUserContext';\n\n//components\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Nav from './components/Nav';\n\n//styles\nimport './App.css';\nimport useCurrentUser from './hooks/useCurrentUser';\nimport Banner from './components/Banner';\n\n/** \n * Top-level App component, renders <Nav/> and <Routes/> components.\n * */\nfunction App() {\n\n  const [ banner, setBanner ] = useState('Welcome to Jobly! To browse and apply for jobs at hundreds of companies!');\n\n  const [ userToken, userData, isLoading, toggleIsLoading, handleLogout, handleEditProfile, handleLogin ] = useCurrentUser();\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <CurrentUserContext.Provider value={{userData, userToken, toggleIsLoading, isLoading, handleLogin, handleEditProfile, setBanner}}>\n          <Nav userToken={userToken} handleLogout={handleLogout}/>\n          <div className=\"content\">\n            <div>\n              {banner ? (<Banner message={banner}/>) : null}\n            </div>\n            <Routes userToken={userToken} isLoading={isLoading} userData={userData}/>\n          </div>\n        </CurrentUserContext.Provider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/jobly-logo.a50b8f41.svg\";"],"sourceRoot":""}