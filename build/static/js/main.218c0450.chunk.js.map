{"version":3,"sources":["flame-788.svg","CurrentUserContext.js","config.js","api/JoblyApi.js","pages/Home.js","hooks/useSubmitApplication.js","components/JobCard.js","hooks/useSearch.js","components/SearchBar.js","hooks/useLoading.js","components/LoadingIcon.js","pages/Jobs.js","pages/Company.js","hooks/useInputChange.js","components/Field.js","pages/Login.js","components/CompanyCard.js","pages/Companies.js","pages/Profile.js","hooks/useLoadRegistration.js","pages/Registration.js","components/Routes.js","hooks/useToggle.js","components/Nav.js","hooks/useCurrentUser.js","components/Banner.js","App.js","serviceWorker.js","index.js","jobly-logo.svg"],"names":["module","exports","CurrentUserContext","createContext","require","config","SECRET","process","SECRET_KEY","JoblyApi","endpoint","paramsOrData","verb","_token","localStorage","getItem","console","debug","axios","method","url","res","data","error","response","message","Array","isArray","handle","request","company","search","jobs","companies","username","password","token","fields","user","jwt","verify","jobId","Home","userToken","userData","isLoading","setUserData","toggleIsLoading","useEffect","forceLoadUserData","a","getCurrentUserData","Object","keys","length","className","id","to","alt","width","src","Illustration","useSubmitApplication","initial","useState","state","setState","status","setStatus","applyForJob","log","setTimeout","JobCard","title","salary","equity","application","submitApplication","disabled","type","onClick","useSearch","value","setValue","handleChange","e","target","resetInput","SearchBar","callback","onSubmit","preventDefault","onChange","useLoading","args","loading","setIsLoading","responseData","setResponseData","history","useHistory","push","getResponseData","LoadingIcon","Logo","Jobs","setSearch","getJobs","map","d","key","uuid","company_handle","Company","useParams","getCompany","name","description","useInputChange","values","setValues","vals","Field","required","placeholder","Login","handleLogin","useContext","resetValues","errs","setErrors","handleSubmit","CompanyCard","num_employees","Companies","getCompanies","c","logo_url","Profile","handleEditProfile","setBanner","first_name","last_name","email","photo_url","style","padding","useLoadRegistration","errors","setUserToken","handleLoadUserData","register","setItem","Registration","resData","handleRegistration","Routes","exact","path","component","withRouter","useToggle","isActive","setIsActive","toggleButton","active","Nav","handleLogout","dropDown","useRef","dropDownBox","JoblyLogo","ref","buttonWidth","useCurrentUser","initialLoad","login","updateUserData","Banner","cursor","App","banner","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.218c0450.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flame-788.ffea5dd6.svg\";","import {createContext} from 'react';\n\nconst CurrentUserContext = createContext();\n\nexport default CurrentUserContext;","require(\"dotenv\").config();\n\nconst SECRET = process.env.SECRET_KEY || 'test';\n\nexport default SECRET;","import axios from 'axios';\nimport jwt from 'jsonwebtoken';\nimport SECRET from '../config';\n\nclass JoblyApi {\n    static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n\n        //get jwt from localStorage if available\n        paramsOrData._token = (\n            localStorage.getItem('userToken')\n        );\n\n        console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n        try {\n            const res = await axios({\n                method: verb,\n                url: `https://jobly-sans-serif.herokuapp.com/${endpoint}`,\n                [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n            });\n\n            return res.data;\n\n                // axios sends query string data via the \"params\" key,\n                // and request body data via the \"data\" key,\n                // so the key we need depends on the HTTP verb'\n\n        } catch(err) {\n            console.error(\"API Error:\", err.response);\n            let message = err.response.data.message;\n            throw Array.isArray(message) ? message : [message];\n        }\n    }\n\n    /** Get all data about a specific company, including all available jobs. \n     * method has one required parameter, handle (string), and one optional parameter jobsOnly (boolean). \n     * By default jobsOnly is set to true, and so returns an array on job objects corresponding to the handle\n     * argument. If a false value is instead passed into the jobsOnly parameter, then getCompany will return the\n     * whole company object, which includes \n    */\n    static async getCompany(handle) {\n        let res = await JoblyApi.request(`companies/${handle}`);\n        return res.company;\n    }\n    \n    /** Get all job listings in the database */\n    static async getJobs(search=null) {\n        let res = await JoblyApi.request(`jobs`, {search});\n        return res.jobs;\n    }\n\n    static async getCompanies(search=null) {\n        let res = await JoblyApi.request(`companies`, {search});\n        return res.companies;\n    }\n\n    static async login(username, password) {\n        let res = await JoblyApi.request(`login`, {username, password}, 'post');\n        return res.token;\n    }\n    \n    /** takes an variable length array of length-two arrays, each two-length array representing a completed registration field,\n     * and containing [key, value], respectively.  */\n    static async register(fields) {\n        let res = await JoblyApi.request(`users`, fields, 'post');\n        return res.token;\n\n    }\n\n    /** returns data related to currentUser*/\n    static async getCurrentUserData() {\n        //get currentUser from localStorage\n        const token = localStorage.getItem('userToken');\n\n        //verify token\n        let user = jwt.verify(token, SECRET);\n\n        //extract username from user\n        const { username } = user;\n\n        //get data about that user\n        let res = await JoblyApi.request(`users/${username}`);\n        return res.user;\n    }\n\n    /** Takes a user object and username string and updates the user info associated\n     * with the passed username to match the new user Object\n     * \n     * params: fields (Object), username (string)*/\n    static async updateUserData(fields, username) {\n        //block jobs and username field from being submitted\n        delete fields.jobs;\n        delete fields.username;\n\n        //send updated user data to server in patch request\n        let res = await JoblyApi.request(`users/${username}`, fields, 'patch');\n\n        //return updated user object\n        return res.user;\n    }\n\n    static async applyForJob(jobId) {\n        let res = await JoblyApi.request(`jobs/${jobId}/apply`, {}, 'post');\n        return res;\n    }\n}\n\nexport default JoblyApi;","//libraries\nimport React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n//styles\nimport '../styles/Home.css';\nimport Illustration from '../flame-788.svg';\nimport JoblyApi from '../api/JoblyApi';\n\nconst Home = ({ userToken, userData, isLoading, setUserData, toggleIsLoading }) => {\n\n    useEffect(() => { \n\n        const forceLoadUserData = async () => {\n            const response = await JoblyApi.getCurrentUserData();\n            setUserData(response);\n        }\n\n        if (userToken && !Object.keys(userData).length && !isLoading) {\n            forceLoadUserData();\n        }\n\n    }, [userToken, userData, isLoading, setUserData, toggleIsLoading]);\n\n    return (\n        <div className=\"Home\">\n            <div className=\"section\">\n                <h1>\n                    Welcome to Jobly!\n                </h1>\n                <h3>\n                    A cross-roads of unconventional paths\n                </h3>\n                <div id=\"home-page-description\">\n                    {\n                        !userToken ? (<Link to=\"/login\"><button id=\"home-login-button\">Login</button></Link>) : <p>To browse available jobs for all companies, navigate to the <b>jobs</b> tab under the drop-down menu. For <u>jobs by\n                        company</u>, access the company directory by selecting the <b>Comapnies</b> tab and then the company you would like to\n                        view. Finally, to view or edit profile details, select the <b>Profile</b> tab from the drop-down.</p>\n                    }\n                </div>\n                \n                <p></p>\n            </div>\n            <div className=\"section\">\n                <img alt=\"\" id=\"illustration\" width=\"300px\" src={Illustration}/>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import { useState } from 'react';\nimport JoblyApi from '../api/JoblyApi';\n\nconst useSubmitApplication = (initial, jobId) => {\n\n    const [state, setState] = useState(initial);\n    const [status, setStatus] = useState('Apply');\n\n    const submitApplication = async () => {\n        setStatus('Submitting...');\n        const response = await JoblyApi.applyForJob(jobId);\n        console.log(response);\n        setTimeout(() => {\n            setState(true);\n        }, 2000);\n    }\n\n    return [state, status, submitApplication];\n}\n\nexport default useSubmitApplication;","//libraries\nimport React from 'react';\n\n//styles\nimport '../styles/JobCard.css'\nimport useSubmitApplication from '../hooks/useSubmitApplication';\n\nconst JobCard = ({id, title, salary, equity, state}) => {\n\n    const [ application, status, submitApplication ] = useSubmitApplication(state, id);\n\n    return (\n        <div className=\"JobCard card\" id={id}>\n            <div className=\"card-section bottom-border\">\n                <h2 className=\"JobCard-title card-item-left\">{title}</h2>\n            </div>\n            <div className=\"card-section\">\n                <h4 className=\"JobCard-salary card-item-left\">Salary: ${salary}</h4>\n            </div>\n            <div className=\"card-section\">\n                <h4 className=\"JobCard-equity card-item-left\">Equity: {100 * equity}%</h4>\n            </div>\n            <div className=\"card-section\">\n                {\n                    application ? (<button className='JobCard-application-button card-item-left applied' disabled type=\"button\">Applied</button>) : ((<button className='JobCard-application-button card-item-left' onClick={submitApplication} type=\"button\">{status}</button>))\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default JobCard;","//libraries\nimport { useState } from 'react';\n\nconst useSearch = (initial=\"\") => {\n    const [ value, setValue ] = useState(initial);\n\n    const handleChange = (e) => {\n        return setValue(e.target.value);\n    }\n    const resetInput = () => setValue('');\n\n    return [ value, handleChange, resetInput ];\n}\n\nexport default useSearch;","import React from 'react';\nimport useSearch from '../hooks/useSearch';\nimport '../styles/SearchBar.css';\n\nconst SearchBar = ({callback}) => {\n\n    const [value, handleChange] = useSearch();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(value);\n        callback(value);\n    }\n\n    return (\n        <form className=\"SearchBar\" onSubmit={handleSubmit}>\n            <input className=\"SearchBar-field\" value={value} type=\"text\" onChange={handleChange}/>\n            <button className=\"SearchBar-button\" type=\"submit\">Search</button>            \n        </form>\n    )\n}\n\nexport default SearchBar;","import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\n/** useLoading is a hook that takes a callback function and an optional args array as parameters,\n * and returns an array with two elements: [ responseData, isLoading ].\n * \n * responseData and isLoading have initial values of {} and true, respectively. Once the callback function\n * passed into useLoading has resolved its promise, responseData will be set to the returned value, and finally\n * isLoading will be set to false.\n */\nconst useLoading = (callback, args=[], search=null, loading=true, fields={}) => {\n    const [ isLoading, setIsLoading ] = useState(loading);\n    const [ responseData, setResponseData ] = useState(fields);\n    const history = useHistory();\n\n    useEffect(()=> {\n\n        /** params: callback (callback fn), args (array)\n         * \n         * Pass args into callback if present. Usually `callback` is a\n         * wrapper for API calls (thus async), and will return a Promise. Once \n         * the promise is resolved, `responseData` is updated in state, and isLoading\n         * is set to false.\n        */\n        const getResponseData = async (callback, args=[]) => {\n            \n            //reset isLoading to true if was false\n            setIsLoading(true);\n\n            try {\n                if (!args.length) {\n                    const response = await callback();\n                    setResponseData(response); \n                } else {\n                    const response = await callback(...args);\n                    setResponseData(response);\n                }\n\n                //update isLoading value in state to trigger re-render\n                setIsLoading(false);\n\n            } catch (err) {\n                history.push('/login')\n            }\n        }\n        getResponseData(callback, args); \n        \n        // eslint-disable-next-line\n    }, [search]);\n    return [ responseData, isLoading ];\n}\n\nexport default useLoading;","import React from 'react';\n\nimport Logo from '../jobly-logo.svg';\n\nimport '../styles/LoadingIcon.css';\n\nconst LoadingIcon = () => {\n    return (\n        <div className=\"LoadingIcon\">\n            <img className=\"App-logo\" alt=\"\" src={Logo} width=\"15%\"/>\n        </div>\n    );\n}\n\nexport default LoadingIcon;","//libraries\nimport React, { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\n\n//components\nimport JobCard from '../components/JobCard';\nimport SearchBar from '../components/SearchBar';\n\n//styles\nimport '../styles/Jobs.css';\nimport JoblyApi from '../api/JoblyApi';\nimport useLoading from '../hooks/useLoading';\nimport LoadingIcon from '../components/LoadingIcon';\n\n/** Jobs company renders a list of JobCard components, and a search bar. If component is\n * rendered from GET /jobs, then all job opennings from all companies will be listed. If \n * instead the component is rendered via GET /companies/:handle, then Jobs will use useParams\n * to get the company handle passed as a url param and list of all the job opennings associated\n * with that company.\n * \n * Jobs takes an optional boolean prop, `all`. If no props are passed to Jobs, then all is set to true by\n * default, and thus the component is signaled to render a list of ALL the jobs. In order to signal that\n * the component should render just the jobs for a single company, then all=false should be passed in. Otherwise\n * the Component won't know to get the URL param handle, and pass it into AJAX/API hook.\n */\nconst Jobs = () => {\n\n    //declare search variable in state\n    const [search, setSearch] = useState('');\n\n    //set callback and args. getJobs takes one optional parameter, handle\n    const [ callback, args ] = [JoblyApi.getJobs, [search]];\n\n    //call useLoading, set\n    const [ responseData, isLoading ] = useLoading(callback, args, search);\n\n    //render loading icon is data hasn't loaded yet\n    if (isLoading) {\n        return (\n            <div>\n                <LoadingIcon/>\n            </div>\n        );\n    }\n    \n    return (\n        <div className=\"Jobs\">\n            <div className=\"search-bar-container\">\n                <SearchBar callback={setSearch}/>\n            </div>\n            <div className=\"JobsList\">\n                {responseData.map(d => (<JobCard id={d.id} key={uuid()} title={d.title} company_handle={d.company_handle} salary={d.salary} equity={d.equity} state={d.state}/>))}\n            </div>\n        </div>\n    );\n}\n\nexport default Jobs;","//libraries\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { v4 as uuid } from 'uuid';\n\n//components\nimport JobCard from '../components/JobCard';\n\n//styles\nimport '../styles/Jobs.css';\nimport JoblyApi from '../api/JoblyApi';\nimport useLoading from '../hooks/useLoading';\nimport LoadingIcon from '../components/LoadingIcon';\n\n/** Company company renders a list of JobCard components, and a search bar. If component is\n * rendered from GET /jobs, then all job opennings from all companies will be listed. If \n * instead the component is rendered via GET /companies/:handle, then Jobs will use useParams\n * to get the company handle passed as a url param and list of all the job opennings associated\n * with that company.\n * \n * Jobs takes an optional boolean prop, `all`. If no props are passed to Jobs, then all is set to true by\n * default, and thus the component is signaled to render a list of ALL the jobs. In order to signal that\n * the component should render just the jobs for a single company, then all=false should be passed in. Otherwise\n * the Component won't know to get the URL param handle, and pass it into AJAX/API hook.\n * */\nconst Company = () => {\n    //get handle from URL parmams\n    const { handle } = useParams();\n\n    //set callback and args. getCompany takes one parameter: handle (string)\n    const [ callback, args ] = [JoblyApi.getCompany, [handle]];\n\n    //call useLoading\n    const [ responseData, isLoading ] = useLoading(callback, args);\n\n    const { name, description, jobs} = responseData;\n\n    if (isLoading) {\n        return (\n            <div>\n                <LoadingIcon/>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"Company\">\n\n            <div className=\"CompanyProfile\">\n                <div>\n                    <h2>{name}</h2>\n                </div>\n\n                <div>\n                    <p>\n                        {description}\n                    </p>\n                </div>\n\n            </div>\n\n            <div className=\"JobsList\">\n                {jobs.map(d => (<JobCard id={d.id} key={uuid()} title={d.title} company_handle={d.company_handle} salary={d.salary} equity={d.equity} state={d.state}/>))}\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Company;","import { useState } from 'react';\n\nconst useInputChange = (initial) => {\n\n    const [values, setValues]= useState(initial);\n\n    const handleChange = (e) => {\n        const { value, name } = e.target;\n        setValues({...values, [name]: value});\n    }\n    \n    const resetValues = () => {\n        setValues(initial);\n    }\n\n    const feedNewValues = (vals) => {\n        setValues(vals)\n    }\n    \n    return [ values, handleChange, resetValues, feedNewValues ];\n}\n\nexport default useInputChange;","import React from 'react';\n\nimport '../styles/Field.css';\n\n/** Generalized input field component. Renders an input element and its label.\n * \n * props: name (string), value (any), handleChange (callback fn), placeholder (string), type (string, default=\"text\")\n * \n*/\nconst Field = ({ disabled, required, name, value, handleChange, placeholder, type='text' }) => {\n    return (\n        <>\n            <input required={required ? true : false} className={`Field-field ${required ? 'required' : ''}`} alt=\"\" type={type} id={name} placeholder={placeholder} value={value} name={name} onChange={handleChange} disabled={disabled}/>       \n        </>\n    );\n}\n\nexport default Field;","//libraries\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useInputChange from '../hooks/useInputChange';\nimport {v4 as uuid} from 'uuid';\nimport CurrentUserContext from '../CurrentUserContext';\n\n//components\nimport Field from '../components/Field';\n\n//styles\nimport '../styles/Form.css';\nimport '../styles/Field.css';\n\n\n/** \n * Login component renders a form with inputs for username and password. \n * \n * props: userToken <string>\n */\nconst Login = ({ userToken }) => {\n\n    //initial values for blank fields\n    const initial = {\n        username: '',\n        password: ''\n    }\n\n    //consume handleLogin from CurrentUserContext\n    const { handleLogin } = useContext(CurrentUserContext);\n\n    //declare history object\n    const history = useHistory();\n\n    //import input change logic\n    const [ values, handleChange, resetValues ] = useInputChange(initial);\n\n    //set error constant into state \n    const [ errs, setErrors ] = useState(null);\n\n    //form submission logic\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const { username, password } = values;\n            await handleLogin(username, password);            \n        } catch (err) {\n            resetValues();\n            console.log(err);\n            setErrors(err);\n        }\n    }\n\n    //redirect to sign-up page when called\n    const redirectToSignUp = () => {\n        history.push('/register')\n    }\n\n    useEffect(() => {\n        if (userToken) {\n            history.push('/');\n        }\n    }, [userToken, history]);\n\n    return (\n        <form className=\"Form\" onSubmit={handleSubmit}>\n\n            <div className=\"Field\">\n\n                <h2>Job Portal Sign-In</h2>\n\n                <Field required key='username' name='username' value={values.username} handleChange={handleChange} placeholder='Username'/>\n\n                <Field required key='password' name='password' value={values.password} handleChange={handleChange} placeholder='Password' type='password'/>\n\n                <button id=\"sign-in-button\" className=\"Field-button\" type=\"submit\">Sign-In</button>\n\n                <div className=\"Form-errors\">\n                    { errs ? (errs.map(e => (<h4 key={() => uuid()} className=\"Form-err\">{e}</h4>))) : null}\n                </div>\n\n            </div>\n\n                <div className=\"bottom-border Field-divider\" width='90%'></div>\n                \n            <div className=\"Field\">\n\n                <h4>New to Jobly?</h4>\n\n                <button id=\"login-sign-up-button\" className=\"Field-button\" type=\"button\" onClick={redirectToSignUp}>Sign-Up</button>\n            \n            </div>\n            \n        </form>\n    );\n}\n\nexport default Login;","//libraries\nimport React from 'react';\n\n//components\nimport { Link } from 'react-router-dom';\n\n//styles\nimport '../styles/CompanyCard.css'\n\nconst CompanyCard = ({handle, name, num_employees, description}) => {\n    console.log(num_employees)\n    return (\n        <Link className=\"CompanyCard card\" id={handle} to={`companies/${handle}`}>\n            <div className=\"card-section bottom-border\">\n                <h2 className=\"CompanyCard-name card-item-left\">{name}</h2>\n            </div>\n            <div className=\"card-section\">\n                <p className=\"CompanyCard-description card-item-left\">{description}</p>\n            </div>\n        </Link>\n    );\n}\n\nexport default CompanyCard;","//libraries\nimport React, { useState } from 'react';\nimport JoblyApi from '../api/JoblyApi';\nimport useLoading from '../hooks/useLoading';\nimport { v4 as uuid } from 'uuid';\nimport SearchBar from '../components/SearchBar';\nimport CompanyCard from '../components/CompanyCard';\n\n//styles\nimport '../styles/Companies.css';\nimport LoadingIcon from '../components/LoadingIcon';\n\n\nconst Companies = () => {\n\n    const [ search, setSearch ] = useState('');\n\n    const [ callback, args ] = [JoblyApi.getCompanies, [search]];\n    \n    const [ responseData, isLoading ] = useLoading(callback, args, search);\n\n    if (isLoading) {\n        return (\n            <div>\n                <LoadingIcon/>\n            </div>\n        );\n    }\n\n    console.log(responseData);\n\n    return (\n        <div className=\"Companies\">\n            <div>\n                <SearchBar callback={setSearch}/>\n            </div>\n            <div className=\"CompaniesList\">\n                {responseData.map(c => (<CompanyCard key={uuid()} handle={c.handle} name={c.name} num_employees={c.num_employees} description={c.description} logo_url={c.logo_url}/>))}\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Companies;","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useInputChange from '../hooks/useInputChange';\nimport '../styles/Form.css';\nimport '../styles/Field.css';\nimport CurrentUserContext from '../CurrentUserContext';\nimport Field from '../components/Field';\nimport JoblyApi from '../api/JoblyApi';\n\nconst Profile = ({ userData, isLoading, userToken }) => {\n\n    const history = useHistory();\n\n    // load the currentUser and callback for updating the user token from context token from context\n    const { handleEditProfile, setBanner, setUserData, toggleIsLoading } = useContext(CurrentUserContext);\n\n    // load response data into the current values\n    const [ values, handleChange ] = useInputChange({...userData, password: ''});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        handleEditProfile(values, userData.username)\n        setBanner('Your Profile Has Been Successfully Updated!');\n        history.push('/');\n    }\n\n\n    useEffect(() => { \n\n        const forceLoadUserData = async () => {\n            const response = await JoblyApi.getCurrentUserData();\n            setUserData(response);\n        }\n\n        if (userToken && !Object.keys(userData).length && !isLoading) {\n            forceLoadUserData();\n        }\n\n    }, [userToken, userData, isLoading, setUserData, toggleIsLoading]);\n\n    return (\n        <form className=\"Form\" onSubmit={handleSubmit}>\n\n            <div className=\"Field\">\n\n                <h2>Profile Editor</h2>\n\n                <Field key='username' name='username' value={values.username || ''} handleChange={handleChange} placeholder='Username' disabled/>\n                <Field key='first_name' name='first_name' value={values.first_name || ''} handleChange={handleChange} placeholder='First Name'/>\n                <Field key='last_name' name='last_name' value={values.last_name || ''} handleChange={handleChange} placeholder='Last Name'/>\n                <Field key='email' name='email' value={values.email || ''} handleChange={handleChange} placeholder='Email'/>\n                <Field key='photo_url' name='photo_url' value={values.photo_url || ''} handleChange={handleChange} placeholder='Photo URL' type='uri'/>\n                \n            </div>\n                <div className=\"bottom-border Field-divider\" width='90%'>\n            </div>\n                <div style={{padding: '15px 0px 15px 0px', }}>\n                    <h3>Enter Password & Confirm Changes</h3>\n                    <Field required key='password' name='password' value={values.password} handleChange={handleChange} placeholder='Password' type='password'/>\n                    <button id=\"sign-up-button\" className=\"Field-button\" type=\"submit\">Confirm</button>\n                </div>\n\n\n\n        </form>\n    );\n}\n\nexport default Profile;","import { useState, useContext } from 'react';\nimport JoblyApi from '../api/JoblyApi';\nimport CurrentUserContext from '../CurrentUserContext';\n\nconst useLoadRegistration = () => {\n\n    const [ responseData, setResponseData ] = useState(null);\n\n    const [ errors, setErrors ] = useState(null);\n\n    const { setUserToken, handleLoadUserData } = useContext(CurrentUserContext);\n\n    // const handleRegistration = async (fields) => {\n        \n    //     try {\n    //         const completedFields = Object.entries(fields).map(f => (f[0].length ? f : null));\n\n    //         const res = await JoblyApi.register(completedFields);\n\n    //         setResponseData(res);\n\n    //     } catch(err) {\n\n    //         setErrors(err);\n\n    //     }\n    // };\n\n    // const { }\n\n    /** handle registration and login sequence */\n    const handleRegistration = async (fields) => {\n        try {\n            //submit sign-up form fields\n            const userToken = await JoblyApi.register(fields);\n\n            //set the jwt for the new user into local Storage\n            localStorage.setItem('userToken', userToken);\n\n            /** pass new localStorage.userToken value to setUserToken. This is an important step for a couple reasons.\n            // 1. passing localStorage.userToken instead of userToken ensures that local storage remains the single source of truth\n            // 2. updating the value of userToken will trigger re-renders on dependent components */\n            setUserToken(() => (localStorage.userToken));\n\n            await handleLoadUserData();\n\n            setResponseData(userToken)\n\n        } catch (err) {\n            \n            setErrors(err);\n        }\n    }\n    return [ responseData, errors, handleRegistration ];\n}\n\nexport default useLoadRegistration;","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useInputChange from '../hooks/useInputChange';\nimport '../styles/Form.css';\nimport '../styles/Field.css';\nimport useLoadRegistration from '../hooks/useLoadRegistration';\nimport Field from '../components/Field';\n\nconst Registration = ({ userToken }) => {\n\n    const initial = {\n        username: '',\n        password: '',\n        first_name: '',\n        last_name: '',\n        email: '',\n        photo_url: ''\n    }\n\n    //declare history variable\n    const history = useHistory();\n\n    //declare field change logic from custom hook\n    const [ values, handleChange, resetValues ] = useInputChange(initial);\n\n    //declare response data and errors into state, load things\n    const [ resData, errs, handleRegistration ] = useLoadRegistration();\n\n    //if response data loads from API, redirect user to home page\n    useEffect(() => {\n        if (resData) {\n            history.push('/');\n        };\n    //eslint-disable-next-line\n    }, [resData]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        handleRegistration(values);\n        resetValues();\n    }\n\n    //redirect user to login form\n    const redirectToLogin = () => {\n        history.push('/login')\n    }\n\n    //if a userToken is already present, redirect user to home\n    useEffect(() => {\n        if (userToken) {\n            history.push('/');\n        }\n    }, [userToken, history]);\n\n    return (\n        <form className=\"Form\" onSubmit={handleSubmit}>\n\n            <div className=\"Field\">\n\n                <h2>Job Portal Sign-In</h2>\n\n                <Field required key='username' name='username' value={values.username} handleChange={handleChange} placeholder='Username'/>\n                <Field required key='password' name='password' value={values.password} handleChange={handleChange} placeholder='Password' type='password'/>\n                <Field required key='first_name' name='first_name' value={values.first_name} handleChange={handleChange} placeholder='First Name'/>\n                <Field required key='last_name' name='last_name' value={values.last_name} handleChange={handleChange} placeholder='Last Name'/>\n                <Field required name='email' value={values.email} handleChange={handleChange} placeholder='Email' type='email'/>\n                <Field required key='photo_url' name='photo_url' value={values.photo_url} handleChange={handleChange} placeholder='Photo URL' type='url'/>\n                \n                <button id=\"sign-up-button\" className=\"Field-button\" type=\"submit\">Sign-Up</button>\n                <div className=\"Form-errors\">\n                    {/* { errs ? (errs.map(e => (<h4 key={() => uuid()} className=\"Form-err\">{e}</h4>))) : null} */}\n                    {errs ? (console.log(errs)) : (null)}\n                </div>\n\n            </div>\n                <div className=\"bottom-border Field-divider\" width='90%'>\n            </div>\n                \n            <div className=\"Field\">\n                <h4>Already Have An Account?</h4>\n                <button id=\"registration-sign-in-button\" className=\"Field-button\" type=\"button\" onClick={redirectToLogin}>Sign-In</button>\n            </div>\n        </form>\n    );\n}\n\nexport default Registration;","//libraries\nimport React from 'react';\n\n//components\nimport { Switch, Route, withRouter } from 'react-router-dom';\nimport Home from '../pages/Home';\nimport Jobs from '../pages/Jobs';\nimport Company from '../pages/Company';\nimport Login from '../pages/Login';\n\n//styles\nimport '../styles/Routes.css';\nimport Companies from '../pages/Companies';\nimport Profile from '../pages/Profile';\nimport Registration from '../pages/Registration';\n\n\n\nconst Routes = ({userToken, isLoading, userData, setUserData, toggleIsLoading}) => {\n    return (\n        <Switch className=\"Routes\">\n\n            <Route exact path=\"/\">\n                <Home  userToken={userToken} userData={userData} isLoading={isLoading} setUserData={setUserData} toggleIsLoading={toggleIsLoading} />\n            </Route>\n\n            <Route exact path=\"/companies\">\n                <Companies/>\n            </Route>\n\n            <Route exact path=\"/jobs\" component={withRouter(Jobs)}/>\n\n            <Route path=\"/companies/:handle\">\n                <Company/>\n            </Route>\n                        \n            <Route exact path=\"/login\">\n                <Login userToken={userToken}/>\n            </Route>\n\n            <Route exact path=\"/register\">\n                <Registration userToken={userToken}/>\n            </Route>\n            \n            <Route exact path=\"/profile\">\n                <Profile userData={userData} isLoading={isLoading} toggleIsLoading={toggleIsLoading} userToken={userToken}/>\n            </Route>\n\n            <Route>\n                <div>\n                    Whoops! The page you requested wasn't found!\n                </div>\n            </Route>\n        </Switch>\n    );\n}\n\nexport default Routes;","import { useState } from 'react';\n\nconst useToggle = (initial=false) => {\n    const [isActive, setIsActive] = useState(initial);\n    const toggleButton = () => setIsActive(active => !active);\n    return [ isActive, toggleButton ];\n}\n\nexport default useToggle;","//libraries\nimport React, { useRef } from 'react';\nimport useToggle from '../hooks/useToggle';\n\n//components\nimport { Link } from 'react-router-dom';\nimport JoblyLogo from '../jobly-logo.svg';\nimport { HamburgerBoring } from 'react-animated-burgers';\n\n//styles \nimport '../styles/Nav.css';\n\n\nconst Nav = ({userToken, handleLogout}) => {\n\n    //set isActive vairable into state to keep track of side nav status\n    const [ isActive, toggleButton ] = useToggle(false);\n\n    //register dropDown and dropDownBox elements into reference using \n    const dropDown = useRef();\n    const dropDownBox = useRef();\n\n    if (userToken) {\n        return (\n            <div className=\"Nav\">\n                <Link id=\"home-link\" className=\"Nav-link\" to=\"/\" onClick={(isActive ? (() => toggleButton()) : null)}><img alt=\"\" src={JoblyLogo} width='50px'/></Link>\n                <div className=\"Nav-drop-down\" ref={dropDownBox}>\n                    <div>\n                        <HamburgerBoring id=\"hamburger-menu\" className=\"Nav-link\" buttonWidth={30} isActive={isActive} toggleButton={toggleButton}/>\n                    </div>\n                    <div className={isActive ? \"menu active\" : \"menu hidden\"}ref={dropDown}>\n                        <div>\n                            <Link className=\"Nav-link\" to=\"/companies\" onClick={(isActive ? (() => toggleButton()) : null)}><h4>Companies</h4></Link>                    \n                        </div>                        \n                        <div>\n                            <Link className=\"Nav-link\" to=\"/jobs\" onClick={(isActive ? (() => toggleButton()) : null)}><h4>Jobs</h4></Link>                    \n                        </div>\n                        <div>\n                            <Link className=\"Nav-link\" to=\"/profile\" onClick={(isActive ? (() => toggleButton()) : null)}><h4>Profile</h4></Link>                    \n                        </div>\n                        <div>\n                            <Link className=\"Nav-link\" onClick={handleLogout} to=\"/\"><h4>Logout</h4></Link>                    \n                        </div>\n                    </div>\n                </div>              \n            </div>\n        );\n    }\n\n    return (\n        <div className=\"Nav\">\n            <Link id=\"home-link\" className=\"Nav-link\" to=\"/\"><img alt=\"\" src={JoblyLogo} width='50px'/></Link>            \n            <Link className=\"Nav-link\" to=\"/login\"><h4>Login</h4></Link>\n        </div>\n    );\n}\n\nexport default Nav;","import { useState, useEffect } from 'react';\nimport JoblyApi from '../api/JoblyApi';\n\n/** \n * Manages all logic related to user data and token storage. It returns \n * [ userToken, userData, isLoading, toggleIsLoading, handleLogout, handleEditProfile, handleLogin ]. \n * */\nconst useCurrentUser = () => {\n\n    const [ userToken, setUserToken ] = useState(localStorage.userToken);\n    const [ userData, setUserData ] = useState({});\n    const [ isLoading, setIsLoading ] = useState(true);\n\n    useEffect(() => {\n        const initialLoad = async () => {\n            const response = await JoblyApi.getCurrentUserData();\n            setUserData(response);\n            setIsLoading(false);\n        }\n\n        if (userToken) {\n            initialLoad();\n        }\n    // eslint-disable-next-line\n    }, []);\n\n    const toggleIsLoading = () => (setIsLoading(!isLoading));\n\n    /** handle logout sequence. clears userToken from localStorage and React state.\n     * Finally clears any userData in state.*/\n    const handleLogout = () => {\n        //remove userToken from localStorage\n        delete localStorage.userToken;\n\n        //clear userToken and userData from state\n        setUserToken(() => (''));\n        setUserData(() => ({}));\n    }\n\n    /** handles basic operation of retrieving currentUserData from server\n     * and updates the userData variable in state\n     */\n    const handleLoadUserData = async () => {\n        //set loading to true\n        setIsLoading(true);\n\n        // message api for current user data\n        const response = await JoblyApi.getCurrentUserData();\n\n        //set response into state\n        setUserData(response);\n\n        //set loading back to false once complete\n        setIsLoading(false);\n\n    }\n\n    /** handle login sequence */\n    const handleLogin = async (username, password) => {\n        try {\n            //use credentials to get user token\n            const userToken = await JoblyApi.login(username, password);\n\n            //set the jwt for the new user into local Storage\n            localStorage.setItem('userToken', userToken);\n\n            /** pass new localStorage.userToken value to setUserToken. This is an important step for a couple reasons.\n            // 1. passing localStorage.userToken instead of userToken ensures that local storage remains the single source of truth\n            // 2. updating the value of userToken will trigger re-renders on dependent components */\n            setUserToken(() => (localStorage.userToken));\n\n            await handleLoadUserData();\n\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    /** handle submission of profile edits */\n    const handleEditProfile = async (fields, username) => {\n        try {\n            // turn on loading screen\n            setIsLoading(true);\n\n            //send form to backend\n            const response = await JoblyApi.updateUserData(fields, username);\n            console.log(response);\n\n            //load response into state\n            setUserData(response);\n\n            //turn off loading screen\n            setIsLoading(false);\n        } catch (err) {\n            //read-out error\n            console.error(err);\n\n            //turn loading screen off incase error\n            setIsLoading(false);\n        }\n    }\n\n    return [ userToken, userData, isLoading, toggleIsLoading, handleLogout, handleEditProfile, handleLogin, setUserData, setUserToken ]\n}\n\nexport default useCurrentUser;","import React, { useContext } from 'react';\nimport CurrentUserContext from '../CurrentUserContext';\nimport '../styles/Banner.css';\n\nconst Banner = ({message}) => {\n    const { setBanner } = useContext(CurrentUserContext);\n    return (\n        <div className=\"Banner\">\n            <div className=\"DeleteBannerButton\" style={{cursor: 'pointer'}} onClick={() => (setBanner(null))}>x</div>\n            <div className=\"BannerMessage\">{message}</div>\n        </div>\n    );\n}\n\nexport default Banner;","//libraries\nimport React, { useState } from 'react';\nimport CurrentUserContext from './CurrentUserContext';\n\n//components\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Nav from './components/Nav';\n\n//styles\nimport './App.css';\nimport useCurrentUser from './hooks/useCurrentUser';\nimport Banner from './components/Banner';\n\n/** \n * Top-level App component, renders <Nav/> and <Routes/> components.\n * */\nfunction App() {\n\n  const [ banner, setBanner ] = useState(null);\n\n  //this is a mess\n  const [ userToken, userData, isLoading, toggleIsLoading, handleLogout, handleEditProfile, handleLogin, setUserData, setUserToken ] = useCurrentUser();\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <CurrentUserContext.Provider value={{userData, userToken, toggleIsLoading, isLoading, handleLogin, handleEditProfile, setBanner, setUserToken}}>\n          <Nav userToken={userToken} handleLogout={handleLogout}/>\n          <div className=\"content\">\n            <div>\n              {banner ? (<Banner message={banner}/>) : null}\n            </div>\n            <Routes userToken={userToken} isLoading={isLoading} userData={userData} setUserData={setUserData} toggleIsLoading={toggleIsLoading}/>\n          </div>\n        </CurrentUserContext.Provider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/jobly-logo.a50b8f41.svg\";"],"sourceRoot":""}